// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Project {
    id              String    @id @default(uuid()) @map("_id")
    key             String    @unique
    name            String
    defaultAssignee String?
    imageUrl        String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime? @updatedAt
    deletedAt       DateTime?
    members         Member[]
}

model Member {
    id        String  @id @default(uuid()) @map("_id")
    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    @@index([projectId])
}

enum TaskType {
    HIGH_PRIORITY
    MEDIUM_PRIORITY 
    LOW_PRIORITY 
    TASK
    SUBTASK
    INITIATIVE
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    DONE
}

model Task {
    id             String        @id @default(uuid()) @map("_id")
    key            String
    name           String
    description    String?       // @db.Text() removed
    status         TaskStatus    @default(TODO)
    type           TaskType      @default(TASK)
    workPeriodPosition Float
    boardPosition  Float         @default(-1)
    reporterId     String        @default("1")
    assigneeId     String?
    parentId       String?
    workPeriodId   String?
    isDeleted      Boolean       @default(false)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    deletedAt      DateTime?
    workPeriodColor String?
    creatorId      String
    comments       Comment[]
    WorkPeriod     WorkPeriod?   @relation(fields: [workPeriodId], references: [id])

    @@unique([key, creatorId])
    @@index([workPeriodId])
}

enum WorkPeriodStatus {
    ACTIVE
    PENDING
    CLOSED
}

enum Duration {
    ONE_WEEK
    TWO_WEEKS
    THREE_WEEKS
    FOUR_WEEKS
    CUSTOM
}

model WorkPeriod {
    id          String          @id @default(uuid()) @map("_id")
    name        String
    description String          // @db.Text() removed
    duration    String?
    startDate   DateTime?
    endDate     DateTime?
    creatorId   String
    createdAt   DateTime        @default(now())
    updatedAt   DateTime?       @updatedAt
    deletedAt   DateTime?
    status      WorkPeriodStatus @default(PENDING)
    tasks       Task[]
}

model Comment {
    id        String    @id @default(uuid()) @map("_id")
    content   String    // @db.Text() removed
    authorId  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    isEdited  Boolean   @default(false)
    taskId    String
    logId     String?
    Task      Task?      @relation(fields: [taskId], references: [id])

    @@index([taskId])
}

model DefaultUser {
    id     String  @id @default(uuid()) @map("_id")
    name   String
    email  String
    avatar String?
}
